Q1:
First thing I want to rule out is when t is longer than s. If this is the case, there is no way for the s to contain all letters of t.
So I return False if t is longer than s. If not, we move on to searching for any anagram of t in s.
For each letter in s, we are going to check if it is in t. If so, we remove that letter from t and move on to the next letter in s.
if the next letter is t, we remove it from t and move on to the next letter in s. We repeat this process until either all letters in
t are gone, in which case we return True, or until a letter is not in t and we reset t to it's original state. If we get through all
letters in s without depleating t, then we return False for there is no anagram of t in s.
The runtime of this algorithm is at best O(1) where t is longer then s and at worst O(n) where n is the number of letters in s.

Q2:
For this question I was able to use an algorithm that looped at most n times where n is the length of a.
Within each loop I check the front of the word and the back of the word to see if it matches it's reversed self.
If so, we return True. If we complete the for loop without finding a palindrome, we return False.
The runtime is at best O(1) where we find the palindrome on the first try and O(n) where we don't find the palindrome
and loop through the entire length of a.

Q3:
In question 3 I ended up using Prim's Algorithm. I knew I was going to need a dictionary (F) to hold the final adjacency list and 
a list (visited) to hold visited nodes. Then, we initialize F with a for loop to give F all keys representing each node in G.
We then choose a random node to start searching with random.choice(). We then repeat the following steps until our visited list
contains all nodes and our MST is fully built:
1. of the edges attached to our nodes in the visited list, we find one with the smallest weight who is attached to a non-visited node.
2. if found, we add that edge to both of it's attached nodes in F and put the new node in the visited list.
3. if not found, this means that our tree is finished. If visited does not contain all the nodes, it means that there were nodes detached
from the graph.
The runtime of this algorithm is O(|E|log|V|).

Q4:
For question 4 we first check to make sure a root node is given. Then we determine the left and right nodes by looping through T[r]. If
we find both left and right we can break from the loop. Now we check if r is less than both n1 and n2. if so we know that the LCA is on 
the right and we can recursively run the function question4() with right as the input for r. If false, we check if r is more than both
n1 and n2. If so we recursively run question4() with left as r. In the case that r is great than one and less than the other, we know
we have found the LCA. Since this is the only remaining case, we can simply return node if the program makes it that far into the function.
The maximum number of times the function can be called is L-1 (where L is the number of levels in the tree) in the case of the LCA being the 
second to last level. Each function call iterates through r's list which contains n elements.
Therefore, the runtime is O((L-1)n).

Q5:
First we check to make sure our input is present. Then we need to figure out how long the list is. We use a while loop to keep moving through the list.
Each iteration we add 1 to our listLen variable. When no "next" node is found, we have reach the end of the list. Now we can subtract m listLen to find
out which node we need to retrieve. We'll store this number in nodeToReturn. We can use a while loop to iterate through the list until we find the node we
are looking for.
The runtime's worst case is O(2n).
